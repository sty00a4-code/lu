require "types.lu"

http = {}
http.request_kind = {
	get = "GET",
	head = "HEAD",
	post = "POST",
	put = "PUT",
	delete = "DELETE",
	connect = "CONNECT",
	options = "OPTIONS",
	trace = "TRACE",
	patch = "PATCH"
}
http.request = setmeta({
	mt = {
		__name = "request",
	},
	tostr = function(self) {
		let s = "$s $s HTTP/1.1\n\r":format(self.kind, self.path)
		if self.headers {
			for key in keys(self.headers) {
				s += "%s: %s\n":format(key, self.headers[key])
			}
			s += "\n\r"
		}
		if self.body {
			s += self.body
			s += "\n\r"
		}
		return s
	}
}, {
	__call = function(self, kind, path, headers, body) {
		let o = obj.copy(self)
		o.kind = kind
		o.path = path | "/"
		o.headers = headers
		o.body = body
		return setmeta(o, self.mt)
	}
})


http.response_kind = {
	_continue = 100,
	switching_protocols = 101,
	processing = 102,
	early_hints = 103,
	ok = 200,
	created = 201,
	accepted = 202,
	non_authoritative_information = 203,
	no_content = 204,
	reset_content = 205,
	partial_content = 206,
	multi_status = 207,
	already_reported = 208,
	multiple_choices = 300,
	moved_permanently = 301,
	found = 302,
	see_other = 303,
	not_modified = 304,
	temporary_redirect = 307,
	permanent_redirect = 308,
	bad_request = 400,
	unauthorized = 401,
	payment_required = 402,
	forbidden = 403,
	not_found = 404,
	method_not_allowed = 405,
	not_acceptable = 406,
	proxy_authentication_required = 407,
	request_timeout = 408,
	conflict = 409,
	gone = 410,
	length_required = 411,
	precondition_failed = 412,
	content_too_large = 413,
	uri_too_long = 414,
	unsupported_media_type = 415,
	range_not_satisfiable = 416,
	expectation_failed = 417,
	im_a_teapot = 418,
	missdirected_request = 421,
	unprocessable_content = 422,
	locked = 423,
	failed_dependency = 424,
	too_early = 425,
	upgrade_required = 426,
	precondition_required = 428,
	too_many_requests = 429,
	request_header_fields_too_large = 431,
	unavailable_for_legal_reasons = 451,
	internal_server_error = 501,
	not_implemented = 502,
	bad_gateway = 503,
	service_unavailable = 504,
	http_version_not_supported = 505,
	variant_also_negotiates = 506,
	insufficient_storage = 507,
	loop_detected = 508,
	not_extended = 510,
	network_authentication_required = 511,
}
http.response = setmeta({
	mt = {
		__name = "response",
	},
	tostr = function(self) {
		let s = "HTTP/1.1 %s\n\r":format(self.kind)
		if self.headers {
			for key in keys(self.headers) {
				s += "%s: %s\n":format(key, self.headers[key])
			}
			s += "\n\r"
		}
		if self.body {
			s += self.body
			s += "\n\r"
		}
		return s
	}
}, {
	__call = function(self, kind, headers, body) {
		let o = obj.copy(self)
		o.kind = kind
		o.headers = headers
		o.body = body
		return setmeta(o, self.mt)
	}
})

function http.get(url, headers, body) {
	let request = http.request(http.request_kind.get, url, headers, body)
	let stream = net.connect(url, 8080)
	if stream {
		stream:write(request:tostr())
		return ok(stream:read())
	}
	return err("couldn't connect to: $q":format(url))
}
function http.post(url, headers, body) {
	let request = http.request(http.request_kind.post, url, headers, body)
}
function http.put(url, headers, body) {
	let request = http.request(http.request_kind.put, url, headers, body)
}