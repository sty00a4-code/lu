binary_layers = [
    ["+", "-"],
    ["*", "/"]
]
unary_layers = [
    ["-"]
]
function display(ast, indent) {
    indent = indent | 0
    if type(ast) == "object" {
        let s = "{\n"
        let prefix = "    " * indent
        let sub_prefix = "    " * (indent + 1)
        for key in keys(ast) {
            if key == "pos" { continue }
            let value = ast[key]
            s += sub_prefix + key + " = " + display(value, indent + 1) + "\n"
        }
        return s + prefix + "}"
    } else if type(ast) == "vector" {
        let s = "[\n"
        let prefix = "    " * indent
        let sub_prefix = "    " * (indent + 1)
        for value in ast {
            s += display(value, indent + 1) + "\n"
        }
        return s + prefix + "]"
    } else {
        return tostr(ast)
    }
}

let Parser = function(tokens) {
    return setmeta({
        tokens = tokens,
        idx = 0,
        get = function(self) {
            return self.tokens[self.idx]
        },
        advance = function(self) {
            self.idx += 1
        },
        token = function(self) {
            let token = self:get()
            self:advance()
            return token
        },
        parse = function(self) {
            return self:expr()
        },
        expr = function(self) {
            return self:binary(0)
        },
        binary = function(self, layer) {
            let ops = binary_layers[layer]
            if !ops {
                return self:unary(0)
            }
            let left = self:binary(layer + 1)?
            while self:get() {
                if self:get().kind != "symbol" {
                    break
                }
                if !ops:contains(self:get().value) {
                    break
                }
                let op = self:token().value
                let right = self:binary(layer + 1)?
                left = {
                    type = "binary",
                    op = op,
                    left = left,
                    right = right
                }
            }
            return ok(left)
        },
        unary = function(self, layer) {
            let ops = unary_layers[layer]
            if !ops {
                return self:call()
            }
            if self:get() {
                if self:get().kind == "symbol" {
                    if ops:contains(self:get().value) {
                        let op = self:token().value
                        let right = self:unary(layer)?
                        return ok({
                            type = "unary",
                            op = op,
                            right = right
                        })
                    }
                }
            }
            return self:unary(layer + 1)
        },
        call = function(self) {
            let head = self:atom()?
            if self:get() {
                if self:get().value == "(" {
                    self:token()
                    let args = []
                    while self:get() {
                        if self:get().value == ")" {
                            break
                        }
                        let arg = self:expr()?
                        args:push(arg)
                        if self:get().value == ")" {
                            break
                        }
                        if self:token().value != "," {
                            return err({
                                msg = "expected ',' or ')'"
                            })
                        }
                    }
                    if self:token().value != ")" {
                        return err({
                            msg = "expected ')'",
                        })
                    }
                    return ok({
                        type = "call",
                        head = head,
                        args = args
                    })
                } 
            }
            return ok(head)
        },
        atom = function(self) {
            let token = self:token()
            if !token {
                return err({
                    msg = "unexpected end of file"
                })
            }
            if ["int", "float", "ident"]:contains(token.kind) {
                return ok({
                    type = token.kind,
                    value = token.value,
                    pos = token.pos,
                })
            } else if token.value == "(" {
                let expr = self:expr()?

                let token = self:token() | {}
                if token.value != ")" {
                    return err({
                        msg = "expected ')'",
                        pos = token.pos
                    })
                }

                return ok(expr)
            } else {
                return err({
                    msg = "unexpected token",
                    pos = token.pos
                })
            }
        }
    }, {
        __name = "parser"
    })
}

return {
    Parser = Parser,
    display = display
}