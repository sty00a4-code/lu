function eval(ast, env) {
    env = env | {}
    let handle = {
        int = function(ast, env) {
            return ok(ast.value)
        },
        float = function(ast, env) {
            return ok(value.value)
        },
        ident = function(ast, env) {
            return ok(env[ast.value])
        },
        binary = function(ast, env) {
            let left = eval(ast.left, env)?
            let right = eval(ast.right, env)?
            if (type(left) != "int" & type(left) != "float") | (type(right) != "int" & type(right) != "float") {
                return err({
                    msg = "cannot perform binary operation on " + type(left) + " and " + type(right)
                })
            }
            if ast.op == "+" {
                return ok(left + right)
            } else if ast.op == "-" {
                return ok(left - right)
            } else if ast.op == "*" {
                return ok(left * right)
            } else if ast.op == "/" {
                return ok(left / right)
            }
            return err({
                msg = "invalid binary operator '" + ast.op + "'"
            })
        },
        unary = function(ast, env) {
            let right = eval(ast.right, env)?
            if type(right) != "int" & type(right) != "float" {
                return err({
                    msg = "cannot perform unary operation on " + type(right)
                })
            }
            if ast.op == "-" {
                return ok(-right)
            }
            return err({
                msg = "invalid unary operator '" + ast.op + "'"
            })
        },
        call = function(ast, env) {
            let head = eval(ast.head, env)?
            let args = []
            for arg in ast.args {
                let arg = eval(arg, env)?
                args:push(arg)
            }
            if type(head) != "function" {
                return err({
                    msg = "cannot call " + type(head)
                })
            }
            return head(args, env)
        }
    }
    return handle[ast.type](ast, env)
}

return eval